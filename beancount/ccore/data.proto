// -*- mode: protobuf -*-
//
// A schema for Beancount's fully booked stream of directives. These are the
// definitions of the API and main artifact produced by the Beancount core, a
// stream of directives.
//
// Note: Unlike in Beancount 2.x, the messages representing the intermediate
// parsed state (the AST) are defined and located elsewhere.

syntax = "proto2";

package beancount;

import 'beancount/ccore/number.proto';

// Container for account types.
message AccountTypes {
  optional string assets = 1;
  optional string liabilities = 2;
  optional string equity = 3;
  optional string income = 4;
  optional string expenses = 5;
}

// A metadata value. This is a simple general variant type intended to keep the
// values of the metadata key-value pairs.
message MetaValue {
  oneof value {
    string text = 1;
    string account = 2;
    string currency = 3;
    string tag = 4;
    string link = 5;
    string flag = 6;
    Date date = 7;
    bool boolean = 8;
    int64 integer = 9;
    Number number = 10;
    Amount amount = 11;
  }
}

// A metadata dictionary, or key-value pairs.
message Meta {
  message KV {
    optional string key = 1;
    optional MetaValue value = 2;
  }
  repeated KV kv = 1;
}

// Civil dates.
// See https://abseil.io/blog/20181010-civil-time.
message Date {
  optional int32 year = 1;
  optional int32 month = 2;
  optional int32 day = 3;
}

// An 'Amount' represents a number of a particular unit of something. It's
// essentially a typed number, with corresponding manipulation operations
// defined on it.
message Amount {
  optional Number number = 1;
  optional string currency = 2;
}

// A variant of Amount that also includes a date and a label.
message Cost {
 // A decimal number, the per-unit cost.
  optional Number number = 1;

  // A string, the cost currency.
  optional string currency = 2;

  // A datetime.date for the date that the lot was created at. There should
  // always be a valid date.
  optional Date date = 3;

  // A string for the label of this lot, or None, if there is no label.
  optional string label = 4;
}

// Postings are contained in Transaction entries. These represent the individual
// legs of a transaction. Note: a posting may only appear within a single entry
// (multiple transactions may not share a Posting instance), and that's what the
// entry field should be set to.
message Posting {
  // Location of the posting.
  optional Location location = 1;

  // A dict of strings to values, the metadata that was attached specifically to
  // that posting, or None, if not provided. In practice, most of the instances
  // will be unlikely to have metadata.
  optional Meta meta = 2;

  // Optional posting date.
  optional Date date = 3;

  // An optional flag, a one-character string or None, which is to be associated
  // with the posting. Most postings don't have a flag, but it can be convenient
  // to mark a particular posting as problematic or pending to be reconciled for
  // a future import of its account.
  optional bytes flag = 4;

  // A string, the account that is modified by this posting.
  optional string account = 5;

  // An Amount, the units of the position.
  optional Amount units = 6;

  // A Cost or CostSpec instances, the units of the position.
  optional Cost cost = 7;

  // An Amount, the price at which the position took place, or None, where not
  // relevant. Providing a price member to a posting automatically adds a price
  // in the prices database at the date of the transaction.
  optional Amount price = 8;
}

//-------------------------------------------------------------------------------
// TODO(blais): Continue here with directives.

message Transaction {
  optional bytes flag = 3;
  optional string payee = 4;
  optional string narration = 5;
  repeated string tags = 6;
  repeated string links = 7;
  repeated Posting postings = 8;
}

message TxnPosting {
  optional Transaction txn = 1;
  optional Posting posting = 2;
}


// A set of valid booking method names for positions on accounts.
// See http://furius.ca/beancount/doc/inventories for a full explanation.
enum Booking {
  UNKNOWN = 0;
  STRICT = 1;  // Reject ambiguous matches with an error.
  NONE = 2;    // Disable matching and accept the creation of mixed inventories.
  AVERAGE = 3; // Average cost booking: merge all matching lots before and after.
  FIFO = 4;    // First-in first-out in the case of ambiguity.
  LIFO = 5;    // Last-in first-out in the case of ambiguity.
}

message Open {
  optional string account = 3;
  repeated string currencies = 4;
  optional Booking booking = 5;
}

message Close {
  optional string account = 3;
}

message Commodity {
  optional string currency = 3;
}

message Pad {
  optional string account = 3;
  optional string source_account = 4;
}

message Balance {
  optional string account = 3;
  optional Amount amount = 4;
  optional Number tolerance = 5;
  optional Amount diff_amount = 6;
}

message Note {
  optional string account = 3;
  optional string comment = 4;
}

message Event {
  optional string type = 3;
  optional string description = 4;
}

message Query {
  optional string name = 3;
  optional string query_string = 4;
}

message Price {
  optional string currency = 3;
  optional Amount amount = 4;
}

message Document {
  optional string account = 3;
  optional string filename = 4;
  repeated string tags = 5;
  repeated string links = 6;
}

message Custom {
  optional string type = 1;
  repeated MetaValue values = 2;
}

// TODO(blais): Insert time for an additional sort-key.
message Directive {
  optional Location location = 1;
  optional Date date = 2;
  optional Meta meta = 3;

  oneof body {
    Transaction transaction = 4;
    Price price = 5;
    Balance balance = 6;
    Open open = 7;
    Close close = 8;
    Commodity commodity = 9;
    Pad pad = 10;
    Document document = 11;
    Note note = 12;
    Event event = 13;
    Query query = 14;
    Custom custom = 15;
  }
}

// A location in an input file.
message Location {
  optional string filename = 1;
  optional int32 lineno = 2;
  optional int32 lineno_end = 3;
}

// An error in processing.
message Error{
  // The error message.
  optional string message = 1;

  // Location where the error occurred in the file, if relevant. The line
  // numbers are optional and may be left unset if not relevant to the context.
  optional Location location = 2;

  // A unique hash referenceing of a corresponding directive.
  optional string dirhash = 3;
}
