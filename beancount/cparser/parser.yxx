/* -*- mode: c++ -*- */
// Parser grammar for beancount 3.0 input syntax (Bison C++).

//- Options -------------------------------------------------------------------

%require "3.7"

%language "c++"
%define api.namespace {beancount::parser}
%define api.parser.class {Parser}
%define parse.error detailed
%define parse.trace

// %verbose, have to specify the output file.
// %token-table // Has no effect on C++ code generation.

%defines
%locations
%define api.filename.type "const std::string"

// %initial-action does not work to set the filename since the location() is set
// on the symbol itself.
// This doesn't work either.
// %initial-action {
//   driver.WithLocation(@$);
// }

// Input state to parser.
%parse-param {::beancount::scanner::Scanner& scanner} {::beancount::parser::Builder& builder}

//- Code blocks ---------------------------------------------------------------

// Inserted in header, before anything else
%code requires {

#define PY_SSIZE_T_CLEAN
#include <Python.h>

#include <cstdint>
#include <cstdio>
#include <fstream>
#include <list>
#include <memory>
#include <string>

#include "absl/strings/string_view.h"

namespace beancount {
namespace scanner { class Scanner; }
namespace parser { class Builder; }
typedef absl::string_view strview;

// Example of a local type; do this + below:  %type <TermList*> termlist
///   // Accumulator for term list.
///   struct TermList {
///     // List of word text.
///     std::list<std::string> words;
///
///     // List of yet-to-be-resolved (type, ident) pairs.
///     // Has ownershipo.
///     std::list<proto::Ref*> unresolved_refs;
///   };

}  // namespace beancount
}  // %code requires

// Inserted in header, at the end.
%code provides {
namespace beancount {

// TODO(blais): Implement these functions below.
/// // Parse contents from the given string.
/// // The 'line_offset' can be used in unit tests to mark the start of the test
/// // string in the parsed file.
/// std::unique_ptr<proto::Database> ParseString(const absl::string_view& input_string,
///                                             const absl::string_view& filename,
///                                             int line_offset = 0);
///
/// // Parse contents from a file.
/// std::unique_ptr<proto::Database> ParseFile(const absl::string_view& filename);
///
/// // Parse contents from stdin.
/// std::unique_ptr<proto::Database> ParseStdin();

}  // namespace beancount
}  // %code provides

//-----------------------------------------------------------------------------
// Inserted in implementation after including parser header.
%code top {

#include "beancount/cparser/scanner.h"  /* Generated by reflex. */
#include "beancount/parser/macros.h"

#include <iostream>
#include <list>
#include <string>
#include <unordered_map>
#include <utility>

#include "absl/container/flat_hash_map.h"
#include "absl/strings/str_cat.h"
#include "absl/strings/str_join.h"
#include "absl/strings/string_view.h"
#include "reflex/input.h"

using absl::string_view;
using std::cerr;
using std::cout;
using std::endl;
using std::list;
using std::pair;
using std::string;
using std::unique_ptr;

namespace beancount {
namespace parser {

/*
 * Call a builder method and detect and handle a Python exception being raised
 * in the handler. Always run the code to clean the references provided by the
 * reduced rule. {05bb0fb60e86}
 */
#define BUILDY(clean, target, method_name, format, ...)                 \
  target = PyObject_CallMethod(builder.obj(), method_name, "Oi" format, \
                               location().begin.filename,               \
                               location().begin.line,                   \
                               ## __VA_ARGS__);                         \
  clean;                                                                \
  if (target == NULL) {                                                 \
    build_grammar_error_from_exception(location(), builder.obj());      \
    YYERROR;                                                            \
  }

#define MISSING_OBJ builder.missing()

/* Build a grammar error from the exception context. */
void build_grammar_error_from_exception(const location& loc, PyObject* builder)
{
#if 0
  /* Get the exception context. */
  PyObject* ptype;
  PyObject* pvalue;
  PyObject* ptraceback;
  PyErr_Fetch(&ptype, &pvalue, &ptraceback);
  PyErr_NormalizeException(&ptype, &pvalue, &ptraceback);

  /* Clear the exception. */
  PyErr_Clear();

  if (pvalue != NULL) {
      /* Build and accumulate a new error object. {27d1d459c5cd} */
      PyObject* rv = PyObject_CallMethod(builder, "build_grammar_error", "OiOOO",
                                         loc->file_name, loc->first_line,
                                         pvalue, ptype, ptraceback);
      if (rv == NULL) {
          /* Note: Leave the internal error trickling up its detail. */
          /* PyErr_SetString(PyExc_RuntimeError, */
          /*                 "Internal error: While building exception"); */
      }
  }
  else {
      PyErr_SetString(PyExc_RuntimeError,
                      "Internal error: No exception");
  }

  Py_XDECREF(ptype);
  Py_XDECREF(pvalue);
  Py_XDECREF(ptraceback);
#endif
}

// TODO(blais): Move this to error() code.
#if 0
/* Error-handling function. {ca6aab8b9748} */
void yyerror(const location& loc, yyscan_t scanner, PyObject* builder, char const* message)
{
  /* Register a syntax error with the builder. */
  PyObject* rv = PyObject_CallMethod(builder, "build_grammar_error", "Ois",
                                     loc->file_name, loc->first_line,
                                     message);
  if (rv == NULL) {
      PyErr_SetString(PyExc_RuntimeError,
                      "Internal error: Building exception from yyerror()");
  }
  Py_XDECREF(rv);
}
#endif

#define DECREF(...) _CC_FUNC(Py_DECREF, __VA_ARGS__)







// In-memory build state for graph of nodes. This driver accepts actions from
// the parser and simply builds up the parsed state. Since the input is not
// assumed to be ordered, resolving references occurs as a separate phase.
class Builder {
public:
  Builder(PyObject* missing);
  virtual ~Builder();

  inline PyObject* obj() const { return builder_obj_; }
  inline PyObject* missing() const { return missing_; }

  // Set the location for errors to occur.
  // This is a stateful setter whose data get used to report errors.
  void WithLocation(const parser::location& location) {
    location_ = location;
  }

  // TODO(blais): Create an updated driver for Beancount.
  //
  /// // Add a new type.
  /// proto::Type* AddType(string_view type, string_view contents,
  ///                      proto::TypeFlavor flavor);
  ///
  /// // Add a new instance of an object node.
  /// proto::Object* AddObject(string_view type,
  ///                          string_view ident,
  ///                          string_view contents);
  ///
  /// // Add a new instance of a lazy object node.
  /// // The identifer is allocated automatically.
  /// proto::Object* AddAutoObject(string_view type,
  ///                              string_view contents) {
  ///
  /// // Add a new instance of an object with default type.
  /// // The identifer is allocated automatically.
  /// proto::Object* AddDefaultObject(string_view contents) {
  ///
  /// // Get the resulting database of objects and clear it.
  /// unique_ptr<proto::Database> GetClearDatabase() {

private:
  // beancount.core.number.MISSING object.
  PyObject* missing_ = nullptr;

  // Last registered location.
  parser::location location_;

  PyObject* builder_obj_;
};

}  // namespace parser
}  // namespace beancount
}  // %code top

// Inserted in implementation before including parser header
// (Within bison's parse() we should invoke lexer.lex(), not the global yylex().)
%code {
#undef yylex
#define yylex scanner.lex
}

//- Tokens --------------------------------------------------------------------
// Note: Token type names appear in the parser header; qualify fully.

/* Collection of value types. */
// TODO(blais): Converts this to variant below.
///// %union {
/////   char character;
/////   const char* string;
/////   PyObject* pyobj;
/////   struct {
/////       PyObject* pyobj1;
/////       PyObject* pyobj2;
/////   } pairobj;
///// }
%define api.value.type variant // See: "C++ Variants"
%define api.token.constructor
%define api.token.prefix {TOK_}

/* Special error token, redefined to carry an error message. */
%token <absl::string_view> error

/* Types for terminal symbols */
%token <absl::string_view> INDENT     /* Initial indent IF at the beginning of a line */
%token EOL        /* End-of-line */
%token PIPE       /* | */
%token ATAT       /* @@ */
%token AT         /* @ */
%token LCURLCURL  /* {{ */
%token RCURLCURL  /* }} */
%token LCURL      /* { */
%token RCURL      /* } */
%token COMMA      /* , */
%token TILDE      /* ~ */
%token HASH       /* # */
%token ASTERISK   /* * */
%token SLASH      /* / */
%token COLON      /* : */
%token PLUS       /* + */
%token MINUS      /* - */
%token LPAREN     /* ( */
%token RPAREN     /* ) */
%token <char> FLAG    /* Valid characters for flags */
%token TXN                 /* 'txn' keyword */
%token BALANCE             /* 'balance' keyword */
%token OPEN                /* 'open' keyword */
%token CLOSE               /* 'close' keyword */
%token COMMODITY           /* 'commodity' keyword */
%token PAD                 /* 'pad' keyword */
%token EVENT               /* 'event' keyword */
%token PRICE               /* 'price' keyword */
%token NOTE                /* 'note' keyword */
%token DOCUMENT            /* 'document' keyword */
%token QUERY               /* 'query' keyword */
%token CUSTOM              /* 'custom' keyword */
%token PUSHTAG             /* 'pushtag' keyword */
%token POPTAG              /* 'poptag' keyword */
%token PUSHMETA            /* 'pushmeta' keyword */
%token POPMETA             /* 'popmeta' keyword */
%token OPTION              /* 'option' keyword */
%token INCLUDE             /* 'include' keyword */
%token PLUGIN              /* 'plugin' keyword */
%token <PyObject*> NONE        /* A None value (parsed as NULL) */
%token <PyObject*> BOOL        /* A boolean, true or false */
%token <PyObject*> DATE        /* A date object */
%token <PyObject*> ACCOUNT     /* The name of an account */
%token <PyObject*> CURRENCY    /* A currency specification */
%token <PyObject*> STRING      /* A quoted string, with any characters inside */
%token <PyObject*> NUMBER      /* A floating-point number */
%token <PyObject*> TAG         /* A tag that can be associated with a transaction */
%token <PyObject*> LINK        /* A link that can be associated with a transaction */
%token <PyObject*> KEY         /* A key in a key-value pair */

/* Types for non-terminal symbols. */
%type <char> txn
%type <char> optflag
%type <PyObject*> account
%type <PyObject*> transaction
%type <PyObject*> posting
%type <PyObject*> key_value
%type <PyObject*> key_value_line
%type <PyObject*> key_value_list
%type <PyObject*> key_value_value
%type <PyObject*> posting_or_kv_list
%type <PyObject*> currency_list
%type <PyObject*> open
%type <PyObject*> close
%type <PyObject*> commodity
%type <PyObject*> balance
%type <PyObject*> pad
%type <std::pair<PyObject*, PyObject*>> amount_tolerance
%type <PyObject*> amount
%type <PyObject*> incomplete_amount
%type <PyObject*> compound_amount
%type <PyObject*> maybe_number
%type <PyObject*> maybe_currency
%type <PyObject*> price_annotation
%type <PyObject*> cost_comp
%type <PyObject*> cost_comp_list
%type <PyObject*> cost_spec
%type <PyObject*> price
%type <PyObject*> event
%type <PyObject*> query
%type <PyObject*> note
%type <PyObject*> document
%type <PyObject*> entry
%type <PyObject*> declarations
%type <PyObject*> txn_strings
%type <PyObject*> tags_links
%type <PyObject*> filename
%type <PyObject*> opt_booking
%type <PyObject*> number_expr
%type <PyObject*> option
%type <PyObject*> pushtag
%type <PyObject*> poptag
%type <PyObject*> pushmeta
%type <PyObject*> popmeta
%type <PyObject*> include
%type <PyObject*> plugin
%type <PyObject*> file
%type <PyObject*> custom
%type <PyObject*> custom_value
%type <PyObject*> custom_value_list

/* Operator precedence.
 * This is pulled straight out of the textbook example:
 * https://www.gnu.org/software/bison/manual/html_node/Infix-Calc.html#Infix-Calc
 */
%left MINUS PLUS
%left ASTERISK SLASH
%precedence NEGATIVE /* negation--unary minus */

/* Start symbol. */
%start file

/* We have some number of expected shift/reduce conflicts at 'eol'. */
%expect 7



//- Grammar rules -------------------------------------------------------------
%%


/* A transaction declaration can be either 'txn' or one of the special character flags. */
txn:
  TXN
    {
      $$ = '*';
    }
  | FLAG
    {
        $$ = $1;
    }
  | ASTERISK
    {
        $$ = '*';
    }
  | HASH
    {
        $$ = '#';
    }

eol: EOL | YYEOF

/* FIXME: This needs be made more general, dealing with precedence.
   I just need this right now, so I'm putting it in, in a way that will.
   be backwards compatible, so this is just a bit of a temporary hack
   (blais, 2015-04-18). */
number_expr:
  NUMBER
  | number_expr PLUS number_expr
    {
      $$ = PyNumber_Add($1, $3);
      DECREF($1, $3);
    }
  | number_expr MINUS number_expr
    {
      $$ = PyNumber_Subtract($1, $3);
      DECREF($1, $3);
    }
  | number_expr ASTERISK number_expr
    {
      $$ = PyNumber_Multiply($1, $3);
      DECREF($1, $3);
    }
  | number_expr SLASH number_expr
    {
      $$ = PyNumber_TrueDivide($1, $3);
      DECREF($1, $3);
    }
  | MINUS number_expr %prec NEGATIVE
    {
      $$ = PyNumber_Negative($2);
      DECREF($2);
    }
  | PLUS number_expr %prec NEGATIVE
    {
      $$ = $2;
    }
  | LPAREN number_expr RPAREN
    {
      $$ = $2;
    }

txn_strings:
  %empty
    {
      Py_INCREF(Py_None);
      $$ = Py_None;
    }
  | txn_strings STRING
    {
      BUILDY(DECREF($1, $2),
             $$, "handle_list", "OO", $1, $2);
    }

tags_links:
  %empty
    {
      BUILDY(,
             $$, "tag_link_new", "");
    }
  | tags_links LINK
    {
      BUILDY(DECREF($1, $2),
             $$, "tag_link_LINK", "OO", $1, $2);
    }
  | tags_links TAG
    {
      BUILDY(DECREF($1, $2),
             $$, "tag_link_TAG", "OO", $1, $2);
    }

transaction:
  DATE txn txn_strings tags_links eol posting_or_kv_list
    {
      BUILDY(DECREF($1, $3, $4, $6),
             $$, "transaction", "ObOOO", $1, $2, $3, $4, $6);
    }

optflag:
  %empty
    {
      $$ = '\0';
    }
  | ASTERISK
    {
      $$ = '*';
    }
  | HASH
    {
      $$ = '#';
    }
  | FLAG

price_annotation:
  incomplete_amount

account:
  ACCOUNT
    {
      BUILDY(DECREF($1),
             $$, "account", "O", $1);
    }

posting:
  INDENT optflag account incomplete_amount cost_spec eol
    {
      BUILDY(DECREF($3, $4, $5),
             $$, "posting", "OOOOOb", $3, $4, $5, Py_None, Py_False, $2);
    }
  | INDENT optflag account incomplete_amount cost_spec AT price_annotation eol
    {
      BUILDY(DECREF($3, $4, $5, $7),
             $$, "posting", "OOOOOb", $3, $4, $5, $7, Py_False, $2);
    }
  | INDENT optflag account incomplete_amount cost_spec ATAT price_annotation eol
    {
      BUILDY(DECREF($3, $4, $5, $7),
             $$, "posting", "OOOOOb", $3, $4, $5, $7, Py_True, $2);
    }
  | INDENT optflag account eol
    {
      BUILDY(DECREF($3),
             $$, "posting", "OOOOOb", $3, MISSING_OBJ, Py_None, Py_None, Py_False, $2);
    }

key_value:
  KEY COLON key_value_value
    {
      BUILDY(DECREF($1, $3),
             $$, "key_value", "OO", $1, $3);
    }

key_value_line:
  INDENT key_value eol
    {
      $$ = $2;
    }

key_value_value:
  STRING
  | account
  | DATE
  | CURRENCY
  | TAG
  | BOOL
  | NONE
  | number_expr
  | amount
  | %empty
    {
      Py_INCREF(Py_None);
      $$ = Py_None;
    }

posting_or_kv_list:
  %empty
    {
      Py_INCREF(Py_None);
      $$ = Py_None;
    }
  | posting_or_kv_list INDENT eol
    {
      $$ = $1;
    }
  | posting_or_kv_list INDENT tags_links eol
    {
      BUILDY(DECREF($1, $3),
             $$, "handle_list", "OO", $1, $3);
    }
  | posting_or_kv_list key_value_line
    {
      BUILDY(DECREF($1, $2),
             $$, "handle_list", "OO", $1, $2);
    }
  | posting_or_kv_list posting
    {
      BUILDY(DECREF($1, $2),
             $$, "handle_list", "OO", $1, $2);
    }

key_value_list:
  %empty
    {
      Py_INCREF(Py_None);
      $$ = Py_None;
    }
  | key_value_list INDENT eol
    {
      $$ = $1;
    }
  | key_value_list key_value_line
    {
      BUILDY(DECREF($1, $2),
             $$, "handle_list", "OO", $1, $2);
    }

currency_list:
  %empty
    {
      Py_INCREF(Py_None);
      $$ = Py_None;
    }
  | CURRENCY
    {
      BUILDY(DECREF($1),
             $$, "handle_list", "OO", Py_None, $1);
    }
  | currency_list COMMA CURRENCY
    {
      BUILDY(DECREF($1, $3),
             $$, "handle_list", "OO", $1, $3);
    }

pushtag:
  PUSHTAG TAG eol
    {
      BUILDY(DECREF($2),
             $$, "pushtag", "O", $2);
    }

poptag:
  POPTAG TAG eol
    {
      BUILDY(DECREF($2),
             $$, "poptag", "O", $2);
    }

pushmeta:
  PUSHMETA key_value eol
    {
      /* Note: key_value is a tuple, Py_BuildValue() won't wrap it up
       * within a tuple, so expand in the method (it receives two
       * objects). See https://docs.python.org/3.4/c-api/arg.html. */
      BUILDY(DECREF($2),
             $$, "pushmeta", "O", $2);
    }

popmeta:
  POPMETA KEY COLON eol
    {
      BUILDY(DECREF($2),
             $$, "popmeta", "O", $2);
    }

open:
  DATE OPEN account currency_list opt_booking eol key_value_list
    {
      BUILDY(DECREF($1, $3, $4, $5, $7),
               $$, "open", "OOOOO", $1, $3, $4, $5, $7);
    }

opt_booking:
  STRING
  | %empty
    {
      Py_INCREF(Py_None);
      $$ = Py_None;
    }

close:
  DATE CLOSE account eol key_value_list
    {
      BUILDY(DECREF($1, $3, $5),
             $$, "close", "OOO", $1, $3, $5);
    }

commodity:
  DATE COMMODITY CURRENCY eol key_value_list
    {
      BUILDY(DECREF($1, $3, $5),
             $$, "commodity", "OOO", $1, $3, $5);
    }

pad:
  DATE PAD account account eol key_value_list
    {
      BUILDY(DECREF($1, $3, $4, $6),
             $$, "pad", "OOOO", $1, $3, $4, $6);
    }

balance:
  DATE BALANCE account amount_tolerance eol key_value_list
    {
      BUILDY(DECREF($1, $3, $6, ($4).first, ($4).second),
             $$, "balance", "OOOOO", $1, $3, ($4).first, ($4).second, $6);
    }

amount:
  number_expr CURRENCY
    {
      BUILDY(DECREF($1, $2),
             $$, "amount", "OO", $1, $2);
    }

amount_tolerance:
  number_expr CURRENCY
    {
      BUILDY(DECREF($1, $2),
             ($$).first, "amount", "OO", $1, $2);
      ($$).second = Py_None;
      Py_INCREF(Py_None);
    }
  | number_expr TILDE number_expr CURRENCY
    {
      BUILDY(DECREF($1, $4),
             ($$).first, "amount", "OO", $1, $4);
      ($$).second = $3;
    }

maybe_number:
  number_expr
  | %empty
    {
      Py_INCREF(MISSING_OBJ);
      $$ = MISSING_OBJ;
    }

maybe_currency:
  CURRENCY
  | %empty
    {
      Py_INCREF(MISSING_OBJ);
      $$ = MISSING_OBJ;
    }

compound_amount:
  maybe_number CURRENCY
    {
      BUILDY(DECREF($1, $2),
             $$, "compound_amount", "OOO", $1, Py_None, $2);
    }
  | number_expr maybe_currency
    {
      BUILDY(DECREF($1, $2),
             $$, "compound_amount", "OOO", $1, Py_None, $2);
    }
  | maybe_number HASH maybe_number CURRENCY
    {
      BUILDY(DECREF($1, $3, $4),
             $$, "compound_amount", "OOO", $1, $3, $4);
    }

incomplete_amount:
  maybe_number maybe_currency
    {
      BUILDY(DECREF($1, $2),
             $$, "amount", "OO", $1, $2);
    }

cost_spec:
  LCURL cost_comp_list RCURL
    {
      BUILDY(DECREF($2),
             $$, "cost_spec", "OO", $2, Py_False);
    }
  | LCURLCURL cost_comp_list RCURLCURL
    {
      BUILDY(DECREF($2),
             $$, "cost_spec", "OO", $2, Py_True);
    }
  | %empty
    {
      Py_INCREF(Py_None);
      $$ = Py_None;
    }

cost_comp_list:
  %empty
    {
      /* We indicate that there was a cost if there */
      $$ = PyList_New(0);
    }
  | cost_comp
    {
      BUILDY(DECREF($1),
             $$, "handle_list", "OO", Py_None, $1);
    }
  | cost_comp_list COMMA cost_comp
    {
      BUILDY(DECREF($1, $3),
             $$, "handle_list", "OO", $1, $3);
    }

cost_comp:
  compound_amount
  | DATE
  | STRING
  | ASTERISK
    {
      BUILDY(,
             $$, "cost_merge", "O", Py_None);
    }

price:
  DATE PRICE CURRENCY amount eol key_value_list
    {
      BUILDY(DECREF($1, $3, $4, $6),
             $$, "price", "OOOO", $1, $3, $4, $6);
    }

event:
  DATE EVENT STRING STRING eol key_value_list
    {
      BUILDY(DECREF($1, $3, $4, $6),
             $$, "event", "OOOO", $1, $3, $4, $6);
    }

query:
  DATE QUERY STRING STRING eol key_value_list
    {
      BUILDY(DECREF($1, $3, $4, $6),
             $$, "query", "OOOO", $1, $3, $4, $6);
    }

note:
  DATE NOTE account STRING eol key_value_list
    {
      BUILDY(DECREF($1, $3, $4, $6),
             $$, "note", "OOOO", $1, $3, $4, $6);
    }

filename: STRING

document:
  DATE DOCUMENT account filename tags_links eol key_value_list
    {
      BUILDY(DECREF($1, $3, $4, $5, $7),
             $$, "document", "OOOOO", $1, $3, $4, $5, $7);
    }

custom_value:
  STRING
    {
      BUILDY(DECREF($1),
             $$, "custom_value", "OO", $1, Py_None);
    }
  | DATE
    {
      BUILDY(DECREF($1),
             $$, "custom_value", "OO", $1, Py_None);
    }
  | BOOL
    {
      BUILDY(DECREF($1),
             $$, "custom_value", "OO", $1, Py_None);
    }
  | amount
    {
      BUILDY(DECREF($1),
             $$, "custom_value", "OO", $1, Py_None);
    }
  | number_expr
    {
      BUILDY(DECREF($1),
             $$, "custom_value", "OO", $1, Py_None);
    }
  | account
    {
      /* Obtain beancount.core.account.TYPE */
      PyObject* module = PyImport_ImportModule("beancount.core.account");
      PyObject* dtype = PyObject_GetAttrString(module, "TYPE");
      Py_DECREF(module);
      BUILDY(DECREF($1, dtype),
             $$, "custom_value", "OO", $1, dtype);
    }

custom_value_list:
  %empty
    {
      Py_INCREF(Py_None);
      $$ = Py_None;
    }
  | custom_value_list custom_value
    {
      BUILDY(DECREF($1, $2),
             $$, "handle_list", "OO", $1, $2);
    }

custom:
  DATE CUSTOM STRING custom_value_list eol key_value_list
   {
     BUILDY(DECREF($1, $3, $4, $6),
            $$, "custom", "OOOO", $1, $3, $4, $6);
   }

entry:
  transaction
  | balance
  | open
  | close
  | pad
  | document
  | note
  | event
  | price
  | commodity
  | query
  | custom

option:
  OPTION STRING STRING eol
    {
      BUILDY(DECREF($2, $3),
             $$, "option", "OO", $2, $3);
    }

include:
  INCLUDE STRING eol
    {
      BUILDY(DECREF($2),
             $$, "include", "O", $2);
    }

plugin:
  PLUGIN STRING eol
    {
      BUILDY(DECREF($2),
             $$, "plugin", "OO", $2, Py_None);
    }
  | PLUGIN STRING STRING eol
    {
      BUILDY(DECREF($2, $3),
             $$, "plugin", "OO", $2, $3);
    }

directive:
  pushtag
  | poptag
  | pushmeta
  | popmeta
  | option
  | include
  | plugin

declarations:
  declarations EOL
  | declarations directive
  | declarations entry
    {
      BUILDY(DECREF($1, $2),
             $$, "handle_list", "OO", $1, $2);
    }
  | declarations error
    {
      /*
       * Ignore the error and continue reducing ({3d95e55b654e}).
       * Note that with the matching rule above, "error" will
       * successfully reduce on each line that cannot reduce.
       * Non-erroneous postings after an error occurs will reduce but
       * not be included because a transaction's list of postings
       * does not include an "error" rule.
       *
       * Note: Adding EOL after the "error" rule above works to
       * reduce the number of calls to this rule resulting from the
       * appearance of an error but makes the parser errors
       * skip the next valid directive, so we just have to make sure
       * repeated runs of this rule's handling code are idempotent.
       */
      $$ = $1;
    }
  | %empty
    {
      Py_INCREF(Py_None);
      $$ = Py_None;
    }


file:
  declarations YYEOF
    {
      BUILDY(DECREF($1),
             $$, "store_result", "O", $1);
    }

// TODO(blais): What about the 'error' token?


%%
//- User code ----------------------------------------------------------------

void beancount::parser::Parser::error(const location& loc, const string& msg)
{
  // TODO(blais): Change this code to log an error and bubble that up to the
  // output. We should never write to stderr.
  using std::cerr;
  using std::endl;
  cerr << loc << ": " << msg << endl;
  if (loc.begin.line == loc.end.line && loc.begin.line == scanner.lineno()) {
    cerr << scanner.matcher().line() << endl;
    for (size_t i = 0; i < loc.begin.column; ++i)
      cerr << " ";
    for (size_t i = loc.begin.column; i <= loc.end.column; ++i)
      cerr << "~";
    cerr << endl;
  } else {
    FILE* file = scanner.in().file(); // The current file being scanned.
    if (file != NULL) {
      beancount::scanner::Scanner::Matcher* m = scanner.new_matcher(file);
      scanner.push_matcher(m);
      off_t pos = ftell(file);
      fseek(file, 0, SEEK_SET);
      for (size_t i = 1; i < loc.begin.line; ++i) {
        m->skip('\n'); // Skip to the next line.
      }
      for (size_t i = loc.begin.line; i <= loc.end.line; ++i) {
        cerr << m->line() << endl;
        m->skip('\n'); // Next line.
      }
      fseek(file, pos, SEEK_SET); // Restore position in the file to continue scanning.
      scanner.pop_matcher(); // Restore matcher.
    }
  }

  // If token is unknown (no match).
  if (scanner.size() == 0) {
    scanner.matcher().winput(); // Skip character.
  }
}

namespace beancount {

namespace parser {

Builder::Builder(PyObject* missing_obj) :
  missing_(missing_obj)
{
}

Builder::~Builder() {
}

// TODO(blais): Implement builder methods here (maybe).

}  //  namespace parser

namespace scanner {

// An extension to the generated scanner that also fetches the filename for the
// location.
class ScannerWithFile : public scanner::Scanner {
public:
  using scanner::Scanner::Scanner;

  // Set the filename for location tokens.
  void SetFilename(const string* filename) {
    filename_ = filename;
  }

  void SetLineOffset(const int line_offset) {
    line_offset_ = line_offset;
  }

  // Override the location to include the filename.
  // TODO(blais): Why do I need this again?
  beancount::parser::location location() override
  {
    /* yylloc.begin.line = static_cast<unsigned int>(matcher().lineno()); */
    /* yylloc.begin.column = static_cast<unsigned int>(matcher().columno()); */
    /* yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end()); */
    /* yylloc.end.column = static_cast<unsigned int>(matcher().columno_end()); */
    auto yylloc = scanner::Scanner::location();
    if (filename_) {
      yylloc.begin.filename = filename_;
    }
    if (line_offset_ > 0) {
      yylloc.begin.line += line_offset_;
      yylloc.end.line += line_offset_;
    }
    return yylloc;
  }
private:
  const string* filename_ = nullptr;
  int line_offset_ = 0;
};

}  // namespace scanner

namespace parser {

// TODO(blais): Implement parser here.
/// // Parse the given input to a database.
/// std::unique_ptr<proto::Database> Parse(const reflex::Input& input,
///                                        const string* filename = nullptr,
///                                        int line_offset = 0) {
///   // Create a scanner and builder.
///   scanner::ScannerWithFile scanner(input, cout);
///   if (filename != nullptr) {
///     scanner.SetFilename(filename);
///   }
///   scanner.SetLineOffset(line_offset);
///   parser::Builder builder;
///
///   // Run the parser.
///   beancount::parser::Parser parser(scanner, builder);
///   int result = parser.parse();
///   (void)result;
///
///   auto db = builder.GetClearDatabase();
///   return db;
/// }
///
/// }  // namespace parser
///
/// std::unique_ptr<proto::Database> ParseString(const string_view& input_string,
///                                              const string_view& filename,
///                                              int line_offset) {
///   // Ensure the string is converted to UTF8 by using reflex::Input and
///   // instantiate a scanner.
///   reflex::Input input(input_string.data(), input_string.size());
///   static const string filename_str(filename);
///   return parser::Parse(input, &filename_str, line_offset);
/// }
///
/// std::unique_ptr<proto::Database> ParseFile(const string_view& filename) {
///   std::ifstream in = std::ifstream(string(filename), std::ios::in);
///   reflex::Input input(in);
///   string filename_str(filename);
///   return parser::Parse(input, &filename_str);
/// }
///
/// std::unique_ptr<proto::Database> ParseStdin() {
///   reflex::Input input(stdin, reflex::Input::file_encoding::utf8);
///   static const string filename = "<string>";
///   auto db = parser::Parse(input, &filename);
///   fclose(stdin);
///   return db;
/// }

}  // namespace parser

}  // namespace beancount
