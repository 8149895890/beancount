/* -*- mode: c++ -*- */
// Scanner definition for Beancount's DSL (with RE/flex).
//
// See RE/flex manual: https://www.genivia.com/doc/reflex/html/

%top{
#include "beancount/cparser/parser.h"    /* Generated by bison. */
#include "beancount/cparser/location.h"  /* Generated by bison %locations. */

#include <utility>
#include <cassert>

#include "reflex/matcher.h"
#include "absl/strings/string_view.h"
#include "absl/time/civil_time.h"

namespace beancount {
namespace scanner {

// Using declarations for symbols in the scanner implementation only.
using std::string_view;
using beancount::parser::Parser;
using std::endl;
using std::string;

// Obtain a string_view of the current match.
inline string_view view(const reflex::Matcher& m) {
  return string_view(m.begin(), m.size());
}

// Copy `src` to `buffer` stripping commas on the way.
void CopyNoCommas(const char* src, char* buffer);

// Convert date string to (year, month, date).
absl::CivilDay ParseDateFromString(const char* string);

// Convert time string to (hour, minute, second).
absl::CivilSecond ParseTimeFromString(const char* string);

}  // namespace scanner
}  // namespace beancount
}

//- Definitions ---------------------------------------------------------------

// This option generates a ascnner that works with Bison 3.2 C++ complete
// symbols, specified by %define api.value.type variant and %define
// api.token.constructor in a Bison grammar file. This option also sets option
// −−bison-cc and sets −−token-type to the parser's symbol_type, and sets
// −−token-eof to 0, assuming these options are not specified already. Combine
// this option with −−bison-locations to support the Bison %locations feature.
%option bison-complete

// This option generates a scanner that works with Bison with locations enabled.
%option bison-locations

%option bison-cc-namespace=beancount::parser
%option bison-cc-parser=Parser

// Throw an exception in the scanner's default rule.
%option exception="beancount::parser::Parser::syntax_error(location(), \"Unknown token.\")"

// TODO(blais): Figure out if I should put the actual derived class for the
// scanner in beancount/cparser/parser.h and set it here.
%option namespace=beancount::scanner
%option lexer=Scanner

%option tabs=8

// Unicode matching is enabled with %option unicode.
%option unicode

%option indent
%option nodefault

%option fast


// States.
%x INVALID
%x IGNORE

// Patterns for the international components of the names of accounts.
ACCOUNTTYPE     [\p{Lu}][\p{L}\p{Nd}\-]*
ACCOUNTNAME     [\p{Lu}\p{Nd}][\p{L}\p{Nd}\-]*

// Characters that may be used as flags. Make sure to include all the
// values from beancount.core.flags to allow round-trips between text
// and entries. {5307d8fa1e7b}
FLAGS           [!&#?%PSTCURM]

//- Rules ---------------------------------------------------------------------
%%

 /* Newlines matter. */
\n { return Parser::make_EOL(location()); }

/* Indentation. This makes use of RE/flex's indentation stops feature and
 * results in much tighter indentation handling. */
^\h+                      // nodent, text is aligned to current margin column
^\h+\i                    { return Parser::make_INDENT(location()); }
^\h*\j                    { return Parser::make_DEDENT(location()); }
\j                        { return Parser::make_DEDENT(location()); }

/* Whitespace. */
[ \t\r]+                  /* Ignored whitespace. */
;.*                       /* Eat up Comments, anywhere. */

 /* Characters with special meanings. */
\|		{ return Parser::make_PIPE(location()); }
@@		{ return Parser::make_ATAT(location()); }
@		{ return Parser::make_AT(location()); }
\{\{		{ return Parser::make_LCURLCURL(location()); }
\}\}		{ return Parser::make_RCURLCURL(location()); }
\{		{ return Parser::make_LCURL(location()); }
\}		{ return Parser::make_RCURL(location()); }
,		{ return Parser::make_COMMA(location()); }
\~		{ return Parser::make_TILDE(location()); }
\+		{ return Parser::make_PLUS(location()); }
\-		{ return Parser::make_MINUS(location()); }
\/		{ return Parser::make_SLASH(location()); }
\(		{ return Parser::make_LPAREN(location()); }
\)		{ return Parser::make_RPAREN(location()); }
\#		{ return Parser::make_HASH(location()); }
\*		{ return Parser::make_ASTERISK(location()); }
\:		{ return Parser::make_COLON(location()); }

{FLAGS} {
  return Parser::make_FLAG(wchr(), location());
}

 /* Keywords. */
txn		{ return Parser::make_TXN(location()); }
balance		{ return Parser::make_BALANCE(location()); }
open		{ return Parser::make_OPEN(location()); }
close		{ return Parser::make_CLOSE(location()); }
commodity	{ return Parser::make_COMMODITY(location()); }
pad		{ return Parser::make_PAD(location()); }
event		{ return Parser::make_EVENT(location()); }
query		{ return Parser::make_QUERY(location()); }
custom		{ return Parser::make_CUSTOM(location()); }
price		{ return Parser::make_PRICE(location()); }
note		{ return Parser::make_NOTE(location()); }
document	{ return Parser::make_DOCUMENT(location()); }
pushtag	        { return Parser::make_PUSHTAG(location()); }
poptag		{ return Parser::make_POPTAG(location()); }
pushmeta	{ return Parser::make_PUSHMETA(location()); }
popmeta		{ return Parser::make_POPMETA(location()); }
option		{ return Parser::make_OPTION(location()); }
plugin		{ return Parser::make_PLUGIN(location()); }
include		{ return Parser::make_INCLUDE(location()); }

TRUE {
  return Parser::make_BOOL(true, location());
}

FALSE {
  return Parser::make_BOOL(false, location());
}

NULL {
  return Parser::make_NONE(location());
}

 /* Dates. */
[0-2][0-9]{3,}[\-/][0-9]{2,}[\-/][0-9]{2,} {
  return Parser::make_DATE(ParseDateFromString(text()), location());
}

 /* Account names. */
{ACCOUNTTYPE}(:{ACCOUNTNAME})+ {
  return Parser::make_ACCOUNT(view(matcher()), location());
}

 /* Currencies. These are defined as uppercase only in order to
  * disambiguate the syntax. This is to be kept in sync with
  * beancount.core.amount.CURRENCY_RE. */
[A-Z][A-Z0-9\'\.\_\-]{0,22}[A-Z0-9] {
  return Parser::make_CURRENCY(view(matcher()), location());
}

 /* String literals. */
\"([^\\\"]|\\.)*\" {
  // TODO(blais): Add state to the scanner for specific encoding.
  string_view view(matcher().begin()+1, matcher().size()-2);
  return Parser::make_STRING(view, location());
}

 /* Numbers. */
([0-9]+|[0-9][0-9,]+[0-9])(\.[0-9]*)? {
  // Strip commas from the local buffer (without allocating memory).
  static char buffer[256];
  assert(size() < 255);
  CopyNoCommas(text(), buffer);
  decimal::Decimal number(buffer);
  return Parser::make_NUMBER(number, location());
}

 /* Tags. */
#[A-Za-z0-9\-_/.]+ {
  string_view view(matcher().begin()+1, matcher().size()-1);
  return Parser::make_TAG(view, location());
}

 /* Links. */
\^[A-Za-z0-9\-_/.]+ {
  string_view view(matcher().begin()+1, matcher().size()-1);
  return Parser::make_LINK(view, location());
}

 /* Keys. */
[a-z][a-zA-Z0-9\-_]+/: {
  return Parser::make_KEY(view(matcher()), location());
}

 /* Lines starting with an asterisk, a colon, an hash, or a character
  * in the FLAGS characters set are ignored. This rule is inserted
  * here to give higher precedence to rules matching valid tokens. */
^[\*\:\#]/.	{ start(IGNORE); }
^{FLAGS}/.	{ start(IGNORE); }

 /* Default rule. {bf253a29a820} */
. {
  matcher().unput(*text());
  start(INVALID);
}

<<EOF>> {
  /* Ensure location data is populated. */
  // TODO(blais): Review this, how to handle in RE/flex.
  /// YY_USER_ACTION;
  return Parser::make_YYEOF(location());
}

 /* Invalid input: skip over to to the next whitespace character. */
<INVALID>[^ \t\n\r]+ {
  // Create an error message to bubble up to the parser.
  std::ostringstream oss;
  oss << "Invalid token: '" << str() << "'";
  std::string error_message = oss.str();

  start(INITIAL);

  // Return special error token generated by Bison.
  //
  // TODO(blais): I'd LOVE to be able to attach the error message for the error
  // to be handled in Bison here!
  return Parser::make_YYerror(error_message, location());
}
 /* Ignore input till the newline. */
<IGNORE>.* {
    start(INITIAL);
}


%%

//-----------------------------------------------------------------------------
// Code: Scanner Body

namespace beancount {
namespace scanner {

void CopyNoCommas(const char* src, char* buffer) {
  char* dst = buffer;
  for (; *src != '\0'; ++src) {
    if (*src == ',')
      continue;
    *dst++ = *src;
  }
  *dst = '\0';
}

namespace {

// Convert ASCII string to an integer. Converts the 'string' string of length
// 'len' to int. The input is assumed to be a valid representation of an integer
// number. No input validation or error checking is performed.
int strtonl(const char* string, size_t len) {
    int result = 0;
    for (size_t i = 0; i < len; ++i) {
        result *= 10;
        result += string[i] - '0';
    }
    return result;
}

}  // namespace

#define DIGITS "0123456789"

absl::CivilDay ParseDateFromString(const char* string) {
  // Note: You could make this faster with a fixed size for dates.
  size_t n = strspn(string, DIGITS);
  int year = strtonl(string, n);
  string += n + 1;

  n = strspn(string, DIGITS);
  int month = strtonl(string, n);
  string += n + 1;

  n = strspn(string, DIGITS);
  int day = strtonl(string, n);

  // TODO(blais): Handle failure to create here, with invalid numerical values.
  return absl::CivilDay{year, month, day};
}

absl::CivilSecond ParseTimeFromString(const char* string) {
  size_t n = strspn(string, DIGITS);
  int hour = strtonl(string, n);
  string += n + 1;

  n = strspn(string, DIGITS);
  int minute = strtonl(string, n);

  int second;
  if (*string == '\0') {
    second = 0;
  } else {
    string += n + 1;
    n = strspn(string, DIGITS);
    second = strtonl(string, n);
  }

  // TODO(blais): Handle failure to create here, e.g., with 26:00:00
  return absl::CivilSecond{hour, minute, second};
}



#if 0
// TODO(blais): I want to move all this to the parser side.
// There should be no error handling in the scanner other than issuing 'error'
// tokens (with a message, somehow).
void build_lexer_error(const parser::location& loc, PyObject* builder, const char* format, ...) {
    PyObject* error;
    PyObject* rv;
    va_list va;

    va_start(va, format);
    error = PyUnicode_FromFormatV(format, va);
    va_end(va);

    if (!error) {
        return;
    }

    rv = PyObject_CallMethod(builder, "build_lexer_error", "OiO",
                             loc.begin.filename, loc.begin.line, error);

    Py_XDECREF(rv);
    Py_XDECREF(error);
}

// TODO(blais): This was used by build_EXCEPTION to dispatch errors
// automatically on failure to call in Python. The new code will have to do
// something in the builder. Restore the functionality on the new builder. This
// is currently unused.
void build_lexer_error_from_exception(const parser::location& loc, PyObject* builder) {
    PyObject* type;
    PyObject* value;
    PyObject* traceback;

    PyErr_Fetch(&type, &value, &traceback);
    PyErr_NormalizeException(&type, &value, &traceback);

    build_lexer_error(loc, builder, "%s: %S", PyExceptionClass_Name(type), value);

    Py_XDECREF(type);
    Py_XDECREF(value);
    Py_XDECREF(traceback);
}
#endif

// TODO(blais): Remove lexer_error() with exception; set the name of the derived
// class of the scanner. Replace build_lexer_error_from_exception() by a call to
// my own version of lexer_error().
//
//   -s, −−nodefault
//   This suppresses the default rule that echoes all unmatched input text when no
//   rule matches. With the −−flex option, the scanner reports "scanner jammed"
//   when no rule matches by calling yyFlexLexer::LexerError("scanner jammed").
//   Without the −−flex and −−debug options, a std::runtime exception is raised by
//   invoking AbstractLexer::lexer_error("scanner jammed"). To throw a custom
//   exception instead, use option −−exception or override the virtual method
//   lexer_error in a derived lexer class. The virtual methods LexerError and
//   lexer_error may be redefined by a user-specified derived lexer class, see
//   Inheriting Lexer/yyFlexLexer . Without the −−flex option, but with the
//   −−debug option, the default rule is suppressed without invoking lexer_error
//   to raise an exception. See also options −−exception=VALUE and -S (or −−find).
//
// One suboptimal way to handle this situation would be for the scanner to
// provide access to the builder--it can, as the actual derived class for the
// scanner is actually defined in the parser.yxx file-- and to log error
// messages from here. However, I think it would be much more elegant to weave
// error messages through to the error token somehow.


// Have another go at inserting time after date.
// TODO(blais): bring this back, it seems to make parsing signicantly slower.
// Two ideas: Move below for precedence, or include in date token with
// separator token.
 /* Times. */
 /*
  [0-9]{4,}[\-/][0-9]+[\-/][0-9]+\.([0-2][0-9]:[0-5][0-9]:([0-5][0-9])?)? {
     return Parser::make_TIME(ParseTimeFromString(text()), location());
  }
  %token <absl::CivilSecond> TIME   A time object
  */

}  // namespace scanner
}  // namespace beancount
